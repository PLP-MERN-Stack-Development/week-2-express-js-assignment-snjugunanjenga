// middleware/errorMiddleware.js

/**
 * 404 Not Found handler.
 * If no route matched, create a NotFoundError and pass to global error handler.
 */
function notFoundHandler(req, res, next) {
  res.status(404).json({
    status: 'fail',
    message: `Cannot find ${req.originalUrl} on this server`
  });
}

/**
 * Global error handling middleware.
 * Catches both synchronous and asynchronous errors.
 * If error is an instance of ApiError, use its statusCode & message.
 * Otherwise, default to 500 Internal Server Error.
 */
function globalErrorHandler(err, req, res, next) {
  console.error('Error details:', {
    name: err.name,
    message: err.message,
    stack: err.stack,
    statusCode: err.statusCode
  });

  // If error was generated by our custom ApiError class
  if (err.statusCode && err.message) {
    return res.status(err.statusCode).json({
      status: 'error',
      message: err.message,
      error: {
        name: err.name,
        statusCode: err.statusCode
      }
    });
  }

  // Fallback for any other kind of thrown error
  res.status(500).json({
    status: 'error',
    message: 'Internal Server Error',
    error: {
      name: err.name,
      message: err.message
    }
  });
}

module.exports = { notFoundHandler, globalErrorHandler };
